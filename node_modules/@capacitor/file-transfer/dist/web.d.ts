import { WebPlugin } from '@capacitor/core';
import { FileTransferPlugin, DownloadFileOptions, DownloadFileResult, UploadFileOptions, UploadFileResult } from './definitions';
interface FilesystemPlugin {
    readFile(options: {
        path: string;
    }): Promise<{
        data: string;
    }>;
    writeFile(options: {
        path: string;
        data: string;
        recursive?: boolean;
    }): Promise<void>;
    mkdir(options: {
        path: string;
        recursive?: boolean;
    }): Promise<void>;
}
declare global {
    interface Window {
        Capacitor?: {
            Plugins?: {
                Filesystem?: FilesystemPlugin;
            };
        };
    }
}
export declare class FileTransferWeb extends WebPlugin implements FileTransferPlugin {
    private lastProgressUpdate;
    private readonly PROGRESS_UPDATE_INTERVAL;
    downloadFile(options: DownloadFileOptions): Promise<DownloadFileResult>;
    uploadFile(options: UploadFileOptions): Promise<UploadFileResult>;
    private buildUrl;
    private notifyProgress;
    private handleError;
    private extractFilename;
    /**
     * Checks if the Capacitor Filesystem plugin is available
     */
    private isFilesystemAvailable;
    /**
     * Attempts to read a file using the Filesystem plugin if available
     * @param path Path to the file
     * @returns Blob with file contents or null if Filesystem plugin is not available
     */
    private tryReadFromFilesystem;
    /**
     * Attempts to write a blob to a file using the Filesystem plugin if available
     * @param blob Blob data to write
     * @param path Path to write the file to
     * @returns true if the file was written successfully, false if Filesystem plugin is not available
     */
    private tryWriteToFilesystem;
    /**
     * Converts a Blob to a base64 string
     * @param blob The blob to convert
     * @returns Promise that resolves to the base64 string
     */
    private blobToBase64;
    /**
     * Gets MIME type from file path based on extension
     * @param path File path
     * @returns MIME type string or null if unable to determine
     */
    private getMimeTypeFromPath;
}
export {};
