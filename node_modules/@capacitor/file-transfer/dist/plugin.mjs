import { registerPlugin as p } from "@capacitor/core";
function s(n) {
  n.CapacitorUtils.Synapse = new Proxy(
    {},
    {
      get(a, o) {
        return new Proxy({}, {
          get(d, i) {
            return (w, c, r) => {
              const t = n.Capacitor.Plugins[o];
              if (t === void 0) {
                r(new Error(`Capacitor plugin ${o} not found`));
                return;
              }
              if (typeof t[i] != "function") {
                r(new Error(`Method ${i} not found in Capacitor plugin ${o}`));
                return;
              }
              (async () => {
                try {
                  const e = await t[i](w);
                  c(e);
                } catch (e) {
                  r(e);
                }
              })();
            };
          }
        });
      }
    }
  );
}
function u(n) {
  n.CapacitorUtils.Synapse = new Proxy(
    {},
    {
      get(a, o) {
        return n.cordova.plugins[o];
      }
    }
  );
}
function f(n = !1) {
  typeof window > "u" || (window.CapacitorUtils = window.CapacitorUtils || {}, window.Capacitor !== void 0 && !n ? s(window) : window.cordova !== void 0 && u(window));
}
const g = p("FileTransfer", {
  web: () => import("./web-PpQmeXfA.js").then((n) => new n.FileTransferWeb())
});
f();
export {
  g as FileTransfer
};
